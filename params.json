{"name":"Backbone.leaflet","tagline":"A map component for Backbone.js","body":"# Backbone.Leaflet (0.0.1-dev)\r\n\r\n[![Continuous Integration status](https://secure.travis-ci.org/LuizArmesto/backbone.leaflet.png)](http://travis-ci.org/LuizArmesto/backbone.leaflet)\r\n\r\n*(Disclaimer: This project is in an early development stage. It is not intended to be used in production yet!)*\r\n\r\n__Backbone.Leaflet__ is a [Backbone](http://backbonejs.org/) plugin designed to work with geospatial data using [GeoJSON](http://geojson.org) specification. This provides an extended model (`Backbone.Leaflet.GeoModel`) and an extended collection (`Backbone.Leaflet.GeoCollection`) that accepts and exports GeoJSON data and a couple of views (`Backbone.Leaflet.MapView` and `Backbone.Leaflet.SatelliteView`) to display `GeoModel` instances in a map, using [Leaflet](http://leafletjs.com).\r\n\r\nYou should be familiar with both Backbone and Leaflet to get the best use out of this plugin.\r\n\r\n__Dependencies__:\r\n * [Backbone 1.0.0](http://backbonejs.org/#downloads) and it dependencies\r\n * [Leaflet 0.5.1](http://leafletjs.com/download.html)\r\n\r\n\r\n## Backbone.Leaflet.GeoModel\r\n\r\nThe `GeoModel` is a [Backbone Model](http://backbonejs.org/#Model) to work with [GeoJSON](http://geojson.org/).\r\n\r\nWhen using `GeoModel` the method `toJSON` will return a JSON object following the [GeoJSON format specification](http://geojson.org/geojson-spec.html). On the other hand you can use either a common JSON or a [GeoJSON object with the type \"Feature\"](http://geojson.org/geojson-spec.html#feature-objects) as an input data. All other methods works as in ordinary Backbone's model.\r\n\r\n### Creating a `GeoModel` instance\r\n\r\n```javascript\r\nvar geojsonFeature = {\r\n  \"type\": \"Feature\",\r\n  \"properties\": {\r\n    \"name\": \"Coors Field\",\r\n    \"amenity\": \"Baseball Stadium\",\r\n    \"popupContent\": \"This is where the Rockies play!\"\r\n  },\r\n  \"geometry\": {\r\n    \"type\": \"Point\",\r\n    \"coordinates\": [-104.99404, 39.75621]\r\n  }\r\n};\r\n\r\nvar geoModel = new Backbone.Leaflet.GeoModel( geojsonFeature );\r\n\r\n```\r\n\r\n## Backbone.Leaflet.GeoCollection\r\n\r\nThe `GeoCollection` is a [Backbone Collection](http://backbonejs.org/#Collection) to work with GeoJSON and `GeoModel`. You can create a new collection using either an array of `GeoModels` or a [GeoJSON object with the type \"FeatureCollection\"](http://geojson.org/geojson-spec.html#feature-collection-objects). The `toJSON` method will return a GeoJSON object.\r\n\r\n### Creating a `GeoCollection` instance\r\n\r\n```javascript\r\nvar geojsonFeatureCollection = {\r\n  \"type\": \"FeatureCollection\",\r\n  \"features\": [\r\n    {\r\n      \"type\": \"Feature\",\r\n      \"geometry\": {\r\n        \"type\": \"Point\",\r\n        \"coordinates\": [-46.6368, -23.5100]\r\n      }\r\n    },\r\n    {\r\n      \"type\": \"Feature\",\r\n      \"geometry\": {\r\n        \"type\": \"Point\",\r\n        \"coordinates\": [-46.6156, -23.5016]\r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\nvar geoCollection = new Backbone.Leaflet.GeoCollection( geojsonFeatureCollection );\r\n\r\n```\r\n\r\n## Backbone.Leaflet.MapView\r\n\r\nThe `MapView` is a [Backbone View](http://backbonejs.org/#View) to display `GeoCollection` and `GeoModel` on [Leaflet](http://leafletjs.com/) map using [MapQuest-OSM](http://developer.mapquest.com/web/products/open/map) tiles.\r\n\r\n\r\n### Creating a simple map\r\n\r\nUse `MapView` just like any other `Backbone` view.\r\n\r\n```javascript\r\nvar mapView = new Backbone.Leaflet.MapView({\r\n\r\n  el: '#map',\r\n\r\n  collection: geoCollection,  // See above how to create a `GeoCollection` instance.\r\n\r\n  map: {\r\n    ...  // Leaflet map options (optional).\r\n  }\r\n\r\n});\r\n```\r\n\r\nFor more informations about map options see the [Leaflet documentation](http://leafletjs.com/reference.html#map-constructor).\r\n\r\n\r\n### Delegating map events\r\n\r\nTo delegate map events just define the `events` property like you usually do but use _\"map\"_ as selector to `Leaflet` map events. To delegate [Layers](http://leafletjs.com/reference.html#ilayer) (markers, polygons, etc) events use _\"layer\"_ as selector.\r\n\r\n```javascript\r\nvar MyMapView = Backbone.Leaflet.MapView.extend({\r\n\r\n  events: {\r\n    'click map': 'onClick',\r\n    'move map': 'onMove',\r\n    'click layer', 'onLayerClick'\r\n  },\r\n\r\n  onClick: function ( evt ) {\r\n    ...\r\n  },\r\n\r\n  onMove: function ( evt ) {\r\n    ...\r\n  },\r\n\r\n  onLayerClick: function ( evt ) {\r\n    var layer = evt.target;  // Get the Leaflet \"layer\" object.\r\n    var model = this.collection.get( layer );  // Get the Backbone model associated to the \"layer\".\r\n    ...\r\n  }\r\n\r\n});\r\n\r\n\r\nvar myMapView = new MyMapView({\r\n  ...  // View options.\r\n});\r\n\r\n```\r\n\r\nFor more informations about Leaflet events see the [map events reference](http://leafletjs.com/reference.html#map-events).\r\n\r\n\r\n## Backbone.Leaflet.SatelliteView\r\n\r\nThe `SatelliteView` works similar to `MapView`, except that uses [MapQuest Open Aerial](http://developer.mapquest.com/web/products/open/map) tiles.\r\n\r\n\r\n## Contributing\r\nIndent your code with 2 spaces, strip trailing whitespace and take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using grunt.\r\n\r\nAlso, please don't edit files in the _\"dist\"_ subdirectory as they are generated via grunt. You'll find source code in the _\"src\"_ subdirectory!\r\n\r\n\r\n## License\r\nCopyright (c) 2013 Luiz Armesto Licensed under the MIT license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}